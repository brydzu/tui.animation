/*!
 * tui-animation.min.js
 * @version 1.1.0
 * @author NHNEnt FE Development Lab <dl_javascript@nhnent.com>
 * @license MIT
 */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("tui-code-snippet")):"function"==typeof define&&define.amd?define(["tui-code-snippet"],n):"object"==typeof exports?exports.animation=n(require("tui-code-snippet")):(e.tui=e.tui||{},e.tui.animation=n(e.tui&&e.tui.util))}(this,function(e){return function(e){function n(i){if(t[i])return t[i].exports;var r=t[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}var t={};return n.m=e,n.c=t,n.p="dist",n(0)}([function(e,n,t){"use strict";function i(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}var r=t(1),o=i(r);e.exports=o},function(e,n,t){"use strict";function i(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}function r(e){if(Array.isArray(e)){for(var n=0,t=Array(e.length);n<e.length;n++)t[n]=e[n];return t}return Array.from(e)}function o(){}function u(e){return window["webkit"+e]||window["moz"+e]||window["ms"+e]}function a(e){return w(e)}function c(e){e&&y(e)}function s(){var e=location,n=e.hostname;v||(v=!0,(0,m.imagePing)("https://www.google-analytics.com/collect",{v:1,t:"event",tid:"UA-115377265-9",cid:n,dp:n,dh:"animation"}))}function f(){function e(e,n){return function t(){var o=new Date-n,u=Math.min(1,o/v||0),s=(0,m.map)(i,function(e,n){return Q[n]*y(u)+e});O.apply(void 0,r(s)),I=a(t),u>=1&&(c(I),e(),x())}}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.from,i=void 0===t?0:t,u=n.to,f=void 0===u?100:u,d=n.duration,v=void 0===d?1e3:d,w=n.easing,y=void 0===w?"linear":w,A=n.frame,O=void 0===A?o:A,h=n.complete,x=void 0===h?o:h,b=n.usageStatistics,g=void 0===b||b;i=(0,m.isArray)(i)?i:[i],f=(0,m.isArray)(f)?f:[f];var I=0,Q=(0,m.map)(i,function(e,n){return f[n]-e});return y=l[y]||l.linear,g&&s(),{run:function(){var n=new Date;return p?new Promise(function(t){return e(t,n)()}):(e(o,n)(),null)},cancel:function(){c(I)}}}n.__esModule=!0,n.requestAnimFrame=a,n.cancelAnimFrame=c,n.anim=f;var d=t(2),l=i(d),m=t(3),p="undefined"!=typeof Promise&&/\[native code\]/.test(Promise.toString()),v=!1,w=window.requestAnimationFrame||u("RequestAnimationFrame")||function(e){return window.setTimeout(e,1e3/60)},y=window.cancelAnimationFrame||u("CancelAnimationFrame")||u("CancelRequestAnimationFrame")||function(e){window.clearTimeout(e)}},function(e,n){"use strict";function t(e){return function(n){return u(n,e)}}function i(e){return function(n){return 1-o(u(n-1,e))}}function r(e){return function(n){return n<.5?t(e)(2*n)/2:i(e)(2*n-1)/2+.5}}n.__esModule=!0;var o=Math.abs,u=Math.pow,a=(n.linear=r(1),n.easeInQuad=t(2)),c=n.easeOutQuad=i(2),s=n.easeInOutQuad=r(2);n.easeIn=a,n.easeOut=c,n.easeInOut=s,n.easeInCubic=t(3),n.easeOutCubic=i(3),n.easeInOutCubic=r(3),n.easeInQuart=t(4),n.easeOutQuart=i(4),n.easeInOutQuart=r(4),n.easeInQuint=t(5),n.easeOutQuint=i(5),n.easeInOutQuint=r(5)},function(n,t){n.exports=e}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,