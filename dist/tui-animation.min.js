/*!
 * tui-animation.min.js
 * @version 0.2.0
 * @author NHNEnt FE Development Lab <dl_javascript@nhnent.com>
 * @license MIT
 */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("tui-code-snippet")):"function"==typeof define&&define.amd?define(["tui-code-snippet"],n):"object"==typeof exports?exports.animation=n(require("tui-code-snippet")):(e.tui=e.tui||{},e.tui.animation=n(e.tui&&e.tui.util))}(this,function(e){return function(e){function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}var t={};return n.m=e,n.c=t,n.p="dist",n(0)}([function(e,n,t){"use strict";function r(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}n.__esModule=!0;var i=t(1),u=r(i);n.default=u},function(e,n,t){"use strict";function r(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}function i(e){if(Array.isArray(e)){for(var n=0,t=Array(e.length);n<e.length;n++)t[n]=e[n];return t}return Array.from(e)}function u(){}function o(e){return window["webkit"+e]||window["moz"+e]||window["ms"+e]}function a(e){return p(e)}function c(e){e&&v(e)}function s(){function e(e,n){return function t(){var u=new Date-n,o=Math.min(1,u/p||0),s=(0,l.map)(r,function(e,n){return I[n]*w(o)+e});O.apply(void 0,i(s)),x=a(t),o>=1&&(c(x),e(),b())}}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.from,r=void 0===t?0:t,o=n.to,s=void 0===o?100:o,f=n.duration,p=void 0===f?1e3:f,v=n.easing,w=void 0===v?"linear":v,y=n.frame,O=void 0===y?u:y,A=n.complete,b=void 0===A?u:A;r=(0,l.isArray)(r)?r:[r],s=(0,l.isArray)(s)?s:[s];var x=0,I=(0,l.map)(r,function(e,n){return s[n]-e});return w=d[w]||d.linear,{run:function(){var n=new Date;return m?new Promise(function(t){return e(t,n)()}):(e(u,n)(),null)},cancel:function(){c(x)}}}n.__esModule=!0,n.requestAnimFrame=a,n.cancelAnimFrame=c,n.anim=s;var f=t(2),d=r(f),l=t(3),m="undefined"!=typeof Promise&&/\[native code\]/.test(Promise.toString()),p=window.requestAnimationFrame||o("RequestAnimationFrame")||function(e){return window.setTimeout(e,1e3/60)},v=window.cancelAnimationFrame||o("CancelAnimationFrame")||o("CancelRequestAnimationFrame")||function(e){window.clearTimeout(e)}},function(e,n){"use strict";function t(e){return function(n){return o(n,e)}}function r(e){return function(n){return 1-u(o(n-1,e))}}function i(e){return function(n){return n<.5?t(e)(2*n)/2:r(e)(2*n-1)/2+.5}}n.__esModule=!0;var u=Math.abs,o=Math.pow,a=(n.linear=i(1),n.easeInQuad=t(2)),c=n.easeOutQuad=r(2),s=n.easeInOutQuad=i(2);n.easeIn=a,n.easeOut=c,n.easeInOut=s,n.easeInCubic=t(3),n.easeOutCubic=r(3),n.easeInOutCubic=i(3),n.easeInQuart=t(4),n.easeOutQuart=r(4),n.easeInOutQuart=i(4),n.easeInQuint=t(5),n.easeOutQuint=r(5),n.easeInOutQuint=i(5)},function(n,t){n.exports=e}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,